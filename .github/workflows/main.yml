name: Docker镜像智能打包离线包

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写 Docker 镜像名称 (多个用英文逗号分开)'
        required: true
        default: 'alpine:latest'
      custom_name:
        description: '可选: 自定义发布名称'
        required: false
      tag:
        description: '可选: 发布标签 (默认为当前日期)'
        required: false

jobs:
  pull_and_package:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create builder and use it
      run: docker buildx create --use

    - name: Install QEMU for multi-arch support
      uses: docker/setup-qemu-action@v3

    - name: Clean up Docker to free space
      run: |
        docker system prune -a -f
        docker volume prune -f

    - name: Pull and Save Multi-Arch Docker Images
      run: |
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        for image in "${image_array[@]}"; do
          image_name_with_registry="${image%%:*}"
          image_name="${image_name_with_registry##*/}"

          file_name="${image_name}.tar"
          docker pull "${image}"
          docker save "${image}" -o "${file_name}"
        done

    - name: List Files for Debugging
      run: ls -lh

    - name: Determine file handling logic
      id: determine_logic
      run: |
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        num_images=${#image_array[@]}

        if [ $num_images -eq 1 ]; then
          original_file="${image_array[0]%%:*}.tar"
          echo "ORIGINAL_FILE=${original_file}" >> $GITHUB_ENV
          if [ -z "${{ github.event.inputs.custom_name }}" ]; then
            custom_file="$original_file"
          else
            custom_file="${{ github.event.inputs.custom_name }}.tar"
          fi
          echo "CUSTOM_FILE=${custom_file}" >> $GITHUB_ENV
        else
          custom_file="$(date +'%Y%m%d').tar.gz"
          if [ -n "${{ github.event.inputs.custom_name }}" ]; then
            custom_file="${{ github.event.inputs.custom_name }}.tar.gz"
          fi
          echo "CUSTOM_FILE=${custom_file}" >> $GITHUB_ENV
        fi

    - name: Compress if necessary
      if: steps.determine_logic.outputs.num_images > 1
      run: tar -czf "${{ env.CUSTOM_FILE }}" *.tar

    - name: Rename file just before file size check
      if: steps.determine_logic.outputs.num_images == 1
      run: |
        if [ "${{ env.ORIGINAL_FILE }}" != "${{ env.CUSTOM_FILE }}" ]; then
          mv "${{ env.ORIGINAL_FILE }}" "${{ env.CUSTOM_FILE }}"
        fi
        ls -lh

    - name: Check file size
      run: |
        file="${{ env.CUSTOM_FILE }}"
        if [ ! -f "$file" ]; then
          echo "File not found!"
          exit 1
        fi
        file_size=$(stat -c%s "$file")
        max_size=$((2 * 1024 * 1024 * 1024))

        if [ "$file_size" -gt "$max_size" ]; then
          echo "EXCEEDS_LIMIT=true" >> $GITHUB_ENV
        else
          echo "EXCEEDS_LIMIT=false" >> $GITHUB_ENV
        fi

    - name: Get release name and tag
      run: |
        if [ -z "${{ github.event.inputs.tag }}" ]; then
          tag_name=$(date +'%Y%m%d')
        else
          tag_name="${{ github.event.inputs.tag }}"
        fi
        echo "RELEASE_TAG=$tag_name" >> $GITHUB_ENV

    - name: Upload to GitHub Release (if under 2GB)
      if: env.EXCEEDS_LIMIT == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        files: ${{ env.CUSTOM_FILE }}
        body: "Daily Docker Images for ${{ env.RELEASE_TAG }}"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload as artifact (if over 2GB)
      if: env.EXCEEDS_LIMIT == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.CUSTOM_FILE }}
        path: ${{ env.CUSTOM_FILE }}

    - name: Clean up intermediate files
      run: rm *.tar*
