name: Docker镜像智能打包

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写 Docker 镜像名称 (多个用英文逗号分开)'
        required: true
        default: 'alpine:latest'
      custom_name:
        description: '可选: 自定义发布名称'
        required: false
      tag:
        description: '可选: 发布标签 (默认为当前日期)'
        required: false

jobs:
  pull_and_package:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create builder and use it
      run: |
        docker buildx create --use

    - name: Install QEMU for multi-arch support
      uses: docker/setup-qemu-action@v2

    - name: Clean up Docker to free space
      run: |
        docker system prune -a -f
        docker volume prune -f

    - name: Pull and Save Multi-Arch Docker Images
      run: |
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        num_images=${#image_array[@]}  # 计算镜像数量
        for image in "${image_array[@]}"; do
          # 获取镜像名称和版本
          image_name="${image%%:*}"  # 镜像名称
          image_tag="${image##*:}"   # 镜像标签
          
          # 如果标签是latest，不在文件名中显示标签
          if [ "$image_tag" = "latest" ]; then
            file_name="${image_name}.tar"
          else
            file_name="${image_name}_${image_tag}.tar"
          fi
          
          # 拉取镜像并保存为文件
          docker pull "${image}"
          docker save "${image}" -o "${file_name}"
        done

    - name: Determine file handling logic
      run: |
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        num_images=${#image_array[@]}  # 计算镜像数量

        if [ $num_images -eq 1 ]; then
          # 如果只有一个镜像，直接使用镜像名作为文件名，不压缩
          image_name="${image_array[0]%%:*}"
          echo "RELEASE_NAME=${image_name}.tar" >> $GITHUB_ENV
        else
          # 如果有多个镜像，使用日期作为文件名，并进行压缩
          echo "RELEASE_NAME=$(date +'%Y%m%d').tar.gz" >> $GITHUB_ENV
        fi

    - name: Compress if necessary
      if: steps.determine_file_handling_logic.outputs.num_images > 1
      run: |
        # 如果有多个镜像，压缩所有 .tar 文件为一个 .tar.gz 文件
        tar -czf "${{ env.RELEASE_NAME }}" *.tar

    - name: Upload artifact to GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ env.RELEASE_NAME }}"  # 动态生成的文件名
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.RELEASE_TAG }}  # 使用提供的标签或当前日期
        name: ${{ env.RELEASE_NAME }}  # 使用镜像名称或自定义名称作为 release 名称
        body: "These are the saved Docker images."
        draft: false
        prerelease: false

    - name: Clean up intermediate files
      run: |
        rm *.tar
