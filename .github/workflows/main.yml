name: Docker镜像智能打包离线包

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写 Docker 镜像名称 (多个用英文逗号分开)'
        required: true
        default: 'alpine:latest'
      custom_name:
        description: '可选: 自定义发布名称 (例如: ng)'
        required: false
      tag:
        description: '可选: 发布标签 (默认为当前日期)'
        required: false

jobs:
  pull_and_package:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create builder and use it
      run: docker buildx create --use

    - name: Install QEMU for multi-arch support
      uses: docker/setup-qemu-action@v3

    - name: Clean up Docker to free space
      run: |
        docker system prune -a -f
        docker volume prune -f

    - name: Pull and Save Multi-Arch Docker Images
      run: |
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        for image in "${image_array[@]}"; do
          image_name_with_registry="${image%%:*}"
          image_name="${image_name_with_registry##*/}"
          image_tag="${image##*:}"

          if [ "$image_tag" = "latest" ]; then
            file_name="${image_name}.tar"
          else
            file_name="${image_name}_${image_tag}.tar"
          fi

          # 尝试拉取和保存镜像
          docker pull "${image}"
          docker save "${image}" -o "${file_name}"

          # 检查文件是否成功生成
          if [ ! -f "$file_name" ]; then
            echo "Error: 文件 $file_name 未能生成，工作流退出。"
            exit 1
          fi
        done

    - name: Determine file handling logic
      id: determine_logic
      run: |
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        num_images=${#image_array[@]}

        if [ $num_images -eq 1 ]; then
          echo "RELEASE_NAME=${{ github.event.inputs.custom_name }}.tar" >> $GITHUB_ENV
        else
          echo "RELEASE_NAME=${{ github.event.inputs.custom_name }}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Compress if necessary
      run: |
        if [[ "${{ github.event.inputs.custom_name }}" && "${{ steps.determine_logic.outputs.num_images }}" -gt 1 ]]; then
          tar -czf "${{ env.RELEASE_NAME }}" *.tar
          if [ ! -f "${{ env.RELEASE_NAME }}" ]; then
            echo "Error: 文件 ${RELEASE_NAME} 未能生成，工作流退出。"
            exit 1
          fi
        fi

    - name: Check file size
      id: check_size
      run: |
        file_size=$(stat -c%s "${{ env.RELEASE_NAME }}")
        max_size=$((2 * 1024 * 1024 * 1024))

        if [ "$file_size" -gt "$max_size" ]; then
          echo "EXCEEDS_LIMIT=true" >> $GITHUB_ENV
        else
          echo "EXCEEDS_LIMIT=false" >> $GITHUB_ENV
        fi

    - name: Get release name and tag
      run: |
        release_name="${{ github.event.inputs.custom_name }}"
        if [ -z "$release_name" ]; then
          release_name="default"
        fi
        echo "RELEASE_NAME=${release_name}" >> $GITHUB_ENV

        if [ -z "${{ github.event.inputs.tag }}" ]; then
          tag_name=$(date +'%Y%m%d')
        else
          tag_name="${{ github.event.inputs.tag }}"
        fi
        echo "RELEASE_TAG=$tag_name" >> $GITHUB_ENV

    - name: Upload to GitHub Release (if under 2GB)
      if: env.EXCEEDS_LIMIT == 'false'
      uses: softprops/action-gh-release@v1  
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        files: ${{ env.RELEASE_NAME }}
        body: "Daily Docker Images for ${{ env.RELEASE_TAG }}"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload as artifact (if over 2GB)
      if: env.EXCEEDS_LIMIT == 'true'
      uses: actions/upload-artifact@v4  
      with:
        name: ${{ env.RELEASE_NAME }}
        path: ${{ env.RELEASE_NAME }}

    - name: Clean up intermediate files (if under 2GB)
      if: env.EXCEEDS_LIMIT == 'false'
      run: |
        rm *.tar
